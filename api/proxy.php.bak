<?php
declare(strict_types=1);
require_once '/home/bitnami/stockloyal_bootstrap.php';
require_once __DIR__ . '/_loadenv.php';
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') { http_response_code(204); exit; }
// added above lines to support api.stockloyal.com for backend API access
// ======================================================================
// api/proxy.php
// Unified Yahoo Finance proxy for:
//  - Screeners (via ?scrId=most_actives)
//  - Symbol search (via POST {"symbol":"AAPL"})
//  - Multi-symbol quote lookup (via POST {"symbol":"AAPL,MSFT"})
// ======================================================================

header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json");

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
    header("Access-Control-Allow-Headers: Content-Type");
    exit;
}

function L($msg) { error_log("[proxy.php] " . $msg); }

$raw = file_get_contents("php://input");
$post = $raw ? json_decode($raw, true) : null;
if ($raw && $post === null) {
    L("Warning: JSON decode failed: " . substr($raw, 0, 200));
}

// $scrId  = isset($_GET['scrId']) ? trim($_GET['scrId']) : null;
$scrId = isset($_GET['scrId'])
    ? trim($_GET['scrId'])
    : (is_array($post) && !empty($post['scrId']) ? trim($post['scrId']) : null);

$symbol = is_array($post) && !empty($post['symbol']) ? trim($post['symbol']) : null;

$ua = "Mozilla/5.0 (StockLoyal Proxy; +https://stockloyal.com)";
$curlTimeout = 20;
$cacheDir = __DIR__ . "/cache";
@mkdir($cacheDir, 0755);

$curl = curl_init();

try {
    // -----------------------------------------------------------
    // ðŸ”¹ MULTI-SYMBOL OR SINGLE SYMBOL LOOKUP
    // -----------------------------------------------------------
    if ($symbol) {
        $symbols = array_filter(array_map('trim', explode(',', strtoupper($symbol))));
        $symbolKey = implode(',', $symbols);
        $cacheFile = $cacheDir . "/quote_" . md5($symbolKey) . ".json";

        // Return cached if < 60 seconds old
        if (file_exists($cacheFile) && (time() - filemtime($cacheFile)) < 60) {
            header("X-Proxy-Cache: HIT");
            echo file_get_contents($cacheFile);
            exit;
        }

        if (count($symbols) > 1) {
            // --- Multi-symbol quote API ---
            $url = "https://query1.finance.yahoo.com/v7/finance/quote?symbols=" . urlencode($symbolKey);
            L("multi-symbol fetch: {$url}");

            curl_setopt_array($curl, [
                CURLOPT_URL => $url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_SSL_VERIFYPEER => false,
                CURLOPT_USERAGENT => $ua,
                CURLOPT_TIMEOUT => $curlTimeout
            ]);

            $resp = curl_exec($curl);
            $http = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            if ($resp === false || $http !== 200) {
                echo json_encode(["success" => false, "error" => "Yahoo quote request failed", "http" => $http]);
                exit;
            }

            $data = json_decode($resp, true);
            $results = $data['quoteResponse']['result'] ?? [];

            $out = [
                "success" => true,
                "count"   => count($results),
                "data"    => array_map(function ($q) {
                    return [
                        "symbol"   => $q['symbol'],
                        "name"     => $q['shortName'] ?? $q['longName'] ?? $q['symbol'],
                        "price"    => $q['regularMarketPrice'] ?? null,
                        "change"   => $q['regularMarketChangePercent'] ?? 0,
                        "currency" => $q['currency'] ?? "USD",
                    ];
                }, $results)
            ];

            @file_put_contents($cacheFile, json_encode($out));
            echo json_encode($out);
            exit;
        }

        // --- Single-symbol path (search + chart fallback) ---
        $q = urlencode($symbol);
        $searchUrl = "https://query1.finance.yahoo.com/v1/finance/search?q={$q}&lang=en-US&region=US&quotesCount=1";
        L("symbol search: {$symbol} -> {$searchUrl}");

        curl_setopt_array($curl, [
            CURLOPT_URL => $searchUrl,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_USERAGENT => $ua,
            CURLOPT_TIMEOUT => $curlTimeout
        ]);

        $resp = curl_exec($curl);
        $http = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        if ($resp === false || $http !== 200) {
            echo json_encode(["success" => false, "error" => "Yahoo search failed", "http" => $http]);
            exit;
        }

        $j = json_decode($resp, true);
        $quotes = $j['quotes'] ?? ($j['finance']['result'][0]['quotes'] ?? []);
        if (empty($quotes)) {
            echo json_encode(["success" => false, "error" => "Symbol not found"]);
            exit;
        }

        $q0 = $quotes[0];
        $outSymbol = $q0['symbol'] ?? ($q0['id'] ?? $symbol);
        $name = $q0['shortname'] ?? $q0['longname'] ?? $q0['name'] ?? ($q0['title'] ?? $outSymbol);

        // --- Chart fallback to get latest price ---
        $chartUrl = "https://query1.finance.yahoo.com/v8/finance/chart/{$outSymbol}?interval=1d&range=1d";
        L("chart fetch: {$chartUrl}");

        curl_setopt_array($curl, [
            CURLOPT_URL => $chartUrl,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_USERAGENT => $ua,
            CURLOPT_TIMEOUT => $curlTimeout
        ]);

        $chartResp = curl_exec($curl);
        $price = $change = null;

        if ($chartResp) {
            $cj = json_decode($chartResp, true);
            $meta = $cj['chart']['result'][0]['meta'] ?? null;
            if ($meta) {
                $price = $meta['regularMarketPrice'] ?? null;
                $prevClose = $meta['previousClose'] ?? null;
                if ($price && $prevClose) {
                    $change = (($price - $prevClose) / $prevClose) * 100;
                }
            }
        }

        $out = [
            "success" => true,
            "symbol"  => $outSymbol,
            "name"    => $name,
            "price"   => ($price !== null ? floatval($price) : null),
            "change"  => ($change !== null ? floatval($change) : 0)
        ];

        @file_put_contents($cacheFile, json_encode($out));
        echo json_encode($out);
        exit;
    }

    // -----------------------------------------------------------
    // ðŸ”¹ SCREENER FETCH
    // -----------------------------------------------------------
    $scr = $scrId ?: 'most_actives';
    $cacheFile = $cacheDir . "/cache_" . preg_replace('/[^a-z0-9_-]/i', '_', $scr) . ".json";
    $cacheTime = 300;

    if (file_exists($cacheFile) && (time() - filemtime($cacheFile)) < $cacheTime) {
        header("X-Proxy-Cache: HIT");
        echo file_get_contents($cacheFile);
        exit;
    }

    $url = "https://query1.finance.yahoo.com/v1/finance/screener/predefined/saved?scrIds=" . urlencode($scr) . "&count=50&lang=en&region=US";
    L("screener fetch: $url");

    curl_setopt_array($curl, [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_USERAGENT => $ua,
        CURLOPT_TIMEOUT => $curlTimeout
    ]);

    $resp = curl_exec($curl);
    $http = curl_getinfo($curl, CURLINFO_HTTP_CODE);

    if ($resp === false || $http !== 200) {
        if (file_exists($cacheFile)) {
            header("X-Proxy-Cache: STALE");
            echo file_get_contents($cacheFile);
            exit;
        }
        echo json_encode(["success" => false, "error" => "Yahoo screener request failed", "http" => $http]);
        exit;
    }

    @file_put_contents($cacheFile, $resp);
    header("X-Proxy-Cache: MISS");
    echo $resp;
    exit;

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(["success" => false, "error" => $e->getMessage()]);
    exit;
} finally {
    if ($curl) curl_close($curl);
}
