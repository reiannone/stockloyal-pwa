<?php
declare(strict_types=1);
require_once '/home/bitnami/stockloyal_bootstrap.php';
require_once __DIR__ . '/_loadenv.php';
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') { http_response_code(204); exit; }
// added above lines to support api.stockloyal.com for backend API access
// api/get_portfolio_orders.php
// --- Aggregates portfolio holdings by symbol, with live prices from Yahoo via proxy.php ---

header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json");

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    header("Access-Control-Allow-Methods: POST, OPTIONS");
    header("Access-Control-Allow-Headers: Content-Type");
    exit;
}

require_once 'config.php';

$input = json_decode(file_get_contents("php://input"), true);
$memberId = $input['member_id'] ?? null;

if (!$memberId) {
    http_response_code(400);
    echo json_encode(["success" => false, "error" => "Missing member_id"]);
    exit;
}

try {
    // âœ… Step 1: Aggregate all confirmed/executed orders by symbol only
    $stmt = $conn->prepare("
        SELECT 
            UPPER(TRIM(symbol)) AS symbol,
            SUM(COALESCE(shares, 0)) AS total_shares,
            SUM(COALESCE(amount, 0)) AS total_invested,
            MAX(placed_at) AS last_trade_date
        FROM orders
        WHERE member_id = :member_id
          AND LOWER(status) IN ('confirmed', 'executed')
        GROUP BY UPPER(TRIM(symbol))
        ORDER BY last_trade_date DESC
    ");
    $stmt->execute([":member_id" => $memberId]);
    $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);

    if (!$rows) {
        echo json_encode(["success" => true, "orders" => [], "portfolio_value" => 0]);
        exit;
    }

    // âœ… Step 2: Fetch live market data via proxy.php
    $symbols = array_column($rows, 'symbol');
    $symbolList = implode(',', $symbols);

    $proxyUrl = "http://" . $_SERVER['HTTP_HOST'] . dirname($_SERVER['PHP_SELF']) . "/proxy.php";
    $ch = curl_init($proxyUrl);
    curl_setopt_array($ch, [
        CURLOPT_POST => true,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HTTPHEADER => ["Content-Type: application/json"],
        CURLOPT_POSTFIELDS => json_encode(["symbol" => $symbolList]),
        CURLOPT_TIMEOUT => 10
    ]);
    $resp = curl_exec($ch);
    $http = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $marketData = [];
    if ($http === 200 && $resp) {
        $data = json_decode($resp, true);
        if (!empty($data['data'])) {
            foreach ($data['data'] as $d) {
                $marketData[strtoupper(trim($d['symbol']))] = [
                    "price" => (float) ($d['price'] ?? 0),
                    "change" => (float) ($d['change'] ?? 0),
                    "name" => $d['name'] ?? $d['symbol']
                ];
            }
        }
    }

    // âœ… Step 3: Combine totals + live market info
    $portfolio = [];
    $portfolioValue = 0;

    foreach ($rows as $r) {
        $symbol = strtoupper(trim($r['symbol']));
        $shares = (float) $r['total_shares'];
        $invested = (float) $r['total_invested'];
        $price = $marketData[$symbol]['price'] ?? ($invested / max($shares, 1));
        $change = $marketData[$symbol]['change'] ?? 0;
        $name = $marketData[$symbol]['name'] ?? "{$symbol} Holdings";

        $currentValue = $price * $shares;
        $portfolioValue += $currentValue;

        $portfolio[] = [
            "symbol" => $symbol,
            "stock_name" => $name,
            "total_shares" => round($shares, 4),
            "original_investment" => round($invested, 2),
            "current_price" => round($price, 2),
            "current_value" => round($currentValue, 2),
            "daily_change" => round($change, 2),
        ];
    }

    echo json_encode([
        "success" => true,
        "orders" => $portfolio,
        "portfolio_value" => round($portfolioValue, 2)
    ]);

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode([
        "success" => false,
        "error" => "Server error: " . $e->getMessage()
    ]);
}
